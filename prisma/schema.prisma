// This is your Prisma schema file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  password      String?   // Hashed password for email/password auth
  accounts      Account[]
  sessions      Session[]

  // Profile
  bio           String?   @db.Text
  location      String?
  faith         String?
  
  // Relations
  prayers       Prayer[]  @relation("CreatedPrayers")
  answers       Prayer[]  @relation("AnsweredPrayers")
  payments      Payment[]
  communities   CommunityMember[]
  testimonies   Testimony[]

  // Stats
  prayersAnswered Int     @default(0)
  prayersCreated  Int     @default(0)
  totalDonated    Decimal @default(0) @db.Decimal(10, 2)
  totalReceived   Decimal @default(0) @db.Decimal(10, 2)

  // Notifications
  notifications  Notification[]
  notificationSettings NotificationSettings?
}

model Prayer {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Content
  title       String
  content     String    @db.Text
  isAnonymous Boolean   @default(false)
  
  // Status
  status      PrayerStatus @default(PENDING)
  isOpen      Boolean   @default(true)
  
  // Financial
  isMonetary  Boolean   @default(false)
  amount      Decimal?  @db.Decimal(10, 2)
  currency    String?
  
  // Relations
  creator     User      @relation("CreatedPrayers", fields: [creatorId], references: [id])
  creatorId   String
  answeredBy  User?     @relation("AnsweredPrayers", fields: [answeredById], references: [id])
  answeredById String?
  
  // Community
  community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
  
  // Related records
  payments    Payment[]
  testimonies Testimony[]
  tags        PrayerTag[]
  updates     PrayerUpdate[]
  
  // Engagement metrics
  viewCount   Int       @default(0)
  prayerCount Int       @default(0) // Number of people who prayed
  
  @@index([status])
  @@index([creatorId])
  @@index([communityId])
}

model Payment {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Payment details
  amount      Decimal   @db.Decimal(10, 2)
  currency    String
  status      PaymentStatus @default(PENDING)
  method      PaymentMethod
  
  // Transaction details
  transactionId String?  @unique // External payment provider transaction ID
  metadata    Json?     // Additional payment provider metadata
  
  // Relations
  prayer      Prayer    @relation(fields: [prayerId], references: [id])
  prayerId    String
  sender      User      @relation(fields: [senderId], references: [id])
  senderId    String
  
  // Receipt/Invoice
  receiptUrl  String?
  description String?   @db.Text

  // M-Pesa specific fields
  merchantRequestID   String?
  checkoutRequestID   String?
  resultCode         String?
  resultDesc         String?
  mpesaReceiptNumber String?
  phoneNumber        String?
  transactionDate    DateTime?

  @@index([status])
  @@index([prayerId])
  @@index([senderId])
}

model Community {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Basic info
  name        String
  description String?   @db.Text
  image       String?
  slug        String    @unique
  
  // Settings
  isPrivate   Boolean   @default(false)
  guidelines  String?   @db.Text
  
  // Relations
  members     CommunityMember[]
  prayers     Prayer[]
  
  // Stats
  memberCount Int       @default(0)
  prayerCount Int       @default(0)
}

model CommunityMember {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  role        CommunityRole @default(MEMBER)
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@unique([communityId, userId])
}

model Testimony {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  content     String    @db.Text
  isAnonymous Boolean   @default(false)
  
  prayer      Prayer    @relation(fields: [prayerId], references: [id])
  prayerId    String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
}

model PrayerTag {
  id          String    @id @default(cuid())
  name        String
  prayer      Prayer    @relation(fields: [prayerId], references: [id])
  prayerId    String

  @@unique([prayerId, name])
}

model PrayerUpdate {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  content     String    @db.Text
  prayer      Prayer    @relation(fields: [prayerId], references: [id])
  prayerId    String
}

model Notification {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  
  type        NotificationType
  title       String
  content     String
  isRead      Boolean   @default(false)
  
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  
  // Optional link to related records
  prayerId    String?
  paymentId   String?
  
  @@index([userId])
  @@index([createdAt])
}

model NotificationSettings {
  id                String    @id @default(cuid())
  user              User      @relation(fields: [userId], references: [id])
  userId            String    @unique
  
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  prayerUpdates     Boolean  @default(true)
  paymentUpdates    Boolean  @default(true)
  communityUpdates  Boolean  @default(true)
}

// Auth related models (for NextAuth.js)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PrayerStatus {
  PENDING
  ANSWERED
  IMPOSSIBLE
  CLOSED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentMethod {
  MPESA
  BANK_TRANSFER
  CARD
  OTHER
}

enum CommunityRole {
  MEMBER
  MODERATOR
  ADMIN
}

enum NotificationType {
  PRAYER_ANSWERED
  PRAYER_UPDATE
  PAYMENT_RECEIVED
  PAYMENT_SENT
  PAYMENT_FAILED
  NEW_TESTIMONY
  COMMUNITY_UPDATE
  SYSTEM
}