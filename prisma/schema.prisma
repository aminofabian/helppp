generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                    String                @id @default(cuid())
  email                 String                @unique
  firstName             String
  lastName              String
  phone                 String?
  imageUrl              String?
  userName              String                @unique
  level                 Int                   @default(1)
  createdAt             DateTime              @default(now())
  totalDonated          Float                 @default(0)
  donationCount         Int                   @default(0)
  createdCommunities    Community[]
  memberships           CommunityMember[]
  Comment               Comment[]
  giverTransactions     Transaction[]         @relation("GiverRelation")
  receiverTransactions  Transaction[]         @relation("ReceiverRelation")
  wallet                Wallet?
  depositWallet         DepositWallet?
  payments              Payment[]
  donations             Donation[]
  requests              Request[]
  love                  Vote[]
  points                Points[]
  recievedNotifications Notification[]        @relation("Recepient")
  issuedNotifications   Notification[]        @relation("Issuer")
  notificationSettings  NotificationSettings?
  Circle                Circle[]
  CircleMember          CircleMember[]
  CircleContribution    CircleContribution[]
  CircleHelpRequest     CircleHelpRequest[]
  testimonies           Testimony[]
  prayers               Prayer[]
  answers               Answer[]
  commentReactions      CommentReaction[]
  leaderboard           Leaderboard[]         @relation("UserLeaderboard")
  pushSubscriptions     PushSubscription[]
  holds                 Hold[]

  @@index([id])
  @@map("users")
}

model Prayer {
  id        String       @id @default(uuid())
  userId    String
  title     String
  content   String
  status    PrayerStatus @default(PENDING)
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  testimony Testimony?
  answer    Answer?      @relation("PrayerAnswer")

  @@index([userId])
}

model Testimony {
  id        String   @id @default(uuid())
  userId    String
  prayerId  String   @unique
  response  String
  createdAt DateTime @default(now())
  answerId  String?  @unique
  user      User     @relation(fields: [userId], references: [id])
  prayer    Prayer   @relation(fields: [prayerId], references: [id])
  answer    Answer?  @relation("TestimonyAnswer", fields: [answerId], references: [id])

  @@index([userId])
  @@index([answerId])
  @@map("testimony")
}

model Answer {
  id         String     @id @default(uuid())
  userId     String
  prayerId   String     @unique
  response   String
  donationId String?    @unique
  paymentId  String?    @unique
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id])
  prayer     Prayer     @relation("PrayerAnswer", fields: [prayerId], references: [id])
  testimony  Testimony? @relation("TestimonyAnswer")
  donation   Donation?  @relation("AnswerDonation", fields: [donationId], references: [id])
  payment    Payment?   @relation("AnswerPayment", fields: [paymentId], references: [id])

  @@index([userId])
  @@index([donationId])
  @@index([paymentId])
}

model Leaderboard {
  id              String @id @default(uuid())
  userId          String
  prayersAnswered Int    @default(0)
  user            User   @relation("UserLeaderboard", fields: [userId], references: [id])

  @@index([userId])
}

model Community {
  id                 String            @id @default(uuid())
  name               String            @unique
  description        String?
  creatorId          String?
  userId             String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  successfulRequests Int               @default(0)
  totalDonations     Float             @default(0)
  User               User?             @relation(fields: [userId], references: [id])
  requests           Request[]
  memberships        CommunityMember[]

  @@index([userId])
}

model CommunityMember {
  id           String    @id @default(uuid())
  userId       String
  communityId  String
  createdAt    DateTime  @default(now())
  totalDonated Float     @default(0)
  user         User      @relation(fields: [userId], references: [id])
  community    Community @relation(fields: [communityId], references: [id])

  @@unique([userId, communityId])
  @@index([userId])
  @@index([communityId])
}

model Request {
  id                  String         @id @default(cuid())
  title               String
  textContent         Json?
  imageString         String?
  deadline            DateTime       @default(now())
  amount              Int
  pointsUsed          Float
  communityName       String?
  userId              String
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  status              String?
  donations           Donation[]
  payments            Payment[]
  Comment             Comment[]
  Community           Community?     @relation(fields: [communityName], references: [name])
  User                User?          @relation(fields: [userId], references: [id])
  Vote                Vote[]
  linkedNotifications Notification[]

  @@index([userId])
  @@index([communityName])
}

model Vote {
  id        String     @id @default(uuid())
  requestId String
  userId    String
  voteType  TypeOfVote
  Request   Request?   @relation(fields: [requestId], references: [id])
  User      User?      @relation(fields: [userId], references: [id])

  @@index([requestId])
  @@index([userId])
  @@map("votes")
}

model Comment {
  id        String            @id @default(cuid())
  text      String
  createdAt DateTime          @default(now())
  userId    String
  requestId String
  parentId  String?
  User      User              @relation(fields: [userId], references: [id])
  Request   Request           @relation(fields: [requestId], references: [id])
  parent    Comment?          @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies   Comment[]         @relation("CommentReplies")
  reactions CommentReaction[]

  @@index([userId])
  @@index([requestId])
  @@index([parentId])
}

model CommentReaction {
  id        String   @id @default(uuid())
  isLike    Boolean  @default(true)
  createdAt DateTime @default(now())
  userId    String
  commentId String
  user      User     @relation(fields: [userId], references: [id])
  comment   Comment  @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Donation {
  id                  String         @id @default(cuid())
  userId              String
  requestId           String
  amount              Float
  createdAt           DateTime       @default(now())
  phoneNumber         String?
  invoice             String
  status              String
  mpesaReceiptNumber  String?
  transactionDate     DateTime?
  User                User?          @relation(fields: [userId], references: [id])
  Request             Request?       @relation(fields: [requestId], references: [id])
  payment             Payment?
  linkedNotifications Notification[]
  answer              Answer?        @relation("AnswerDonation")

  @@index([userId])
  @@index([requestId])
}

model Transaction {
  id         String   @id @default(cuid())
  giverId    String
  receiverId String
  amount     Float
  timestamp  DateTime @default(now())
  giver      User     @relation("GiverRelation", fields: [giverId], references: [id])
  receiver   User     @relation("ReceiverRelation", fields: [receiverId], references: [id])

  @@index([giverId])
  @@index([receiverId])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Payment {
  id                 String        @id @default(cuid())
  resultCode         String?
  resultDesc         String?
  amount             Float
  userts             DateTime
  userId             String?
  requestId          String?
  donationId         String?       @unique
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  mpesaReceiptNumber String?
  phoneNumber        String?
  transactionDate    DateTime?
  paymentMethod      PaymentMethod
  checkoutRequestId  String?
  currency           String?
  merchantRequestId  String?
  status             PaymentStatus @default(PENDING)
  sender             User?         @relation(fields: [userId], references: [id])
  request            Request?      @relation(fields: [requestId], references: [id])
  donation           Donation?     @relation(fields: [donationId], references: [id])
  points             Points?
  answer             Answer?       @relation("AnswerPayment")

  @@index([userId])
  @@index([requestId])
  @@index([paymentMethod])
}

model Points {
  id        String   @id @default(cuid())
  userId    String
  amount    Int
  paymentId String   @unique
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  payment   Payment  @relation(fields: [paymentId], references: [id])

  @@index([userId])
}

model Notification {
  id          String           @id @default(cuid())
  recipientId String
  issuerId    String
  requestId   String?
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  donationId  String?
  content     String
  title       String
  recipient   User             @relation("Recepient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  request     Request?         @relation(fields: [requestId], references: [id], onDelete: Cascade)
  donation    Donation?        @relation(fields: [donationId], references: [id], onDelete: Cascade)

  @@index([recipientId])
  @@index([issuerId])
  @@index([requestId])
  @@index([donationId])
  @@map("notifications")
}

model Circle {
  id            String               @id @default(uuid())
  name          String
  description   String?
  ownerId       String
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  owner         User                 @relation(fields: [ownerId], references: [id])
  members       CircleMember[]
  helpRequests  CircleHelpRequest[]
  contributions CircleContribution[]

  @@index([ownerId])
}

model CircleMember {
  id        String   @id @default(uuid())
  circleId  String
  userId    String
  createdAt DateTime @default(now())
  circle    Circle   @relation(fields: [circleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([circleId, userId])
}

model CircleHelpRequest {
  id          String        @id @default(uuid())
  circleId    String
  requesterId String
  title       String
  description String
  amount      Float?
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  circle      Circle        @relation(fields: [circleId], references: [id])
  requester   User          @relation(fields: [requesterId], references: [id])

  @@index([circleId])
  @@index([requesterId])
}

model CircleContribution {
  id        String   @id @default(uuid())
  circleId  String
  userId    String
  amount    Float
  createdAt DateTime @default(now())
  circle    Circle   @relation(fields: [circleId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([circleId])
  @@index([userId])
}

model NotificationSettings {
  id           String   @id @default(cuid())
  userId       String   @unique
  emailEnabled Boolean  @default(true)
  pushEnabled  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model DepositWallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Float    @default(0)
  name      String?  @default("Donation Pool")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum PrayerStatus {
  PENDING
  ANSWERED
  CLOSED
}

enum TypeOfVote {
  LOVE
  SUSPISION
}

enum PaymentMethod {
  MPESA
  PAYSTACK
  PAYPAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum NotificationType {
  LIKE
  COMMENT
  NEWREQUEST
  DONATION
  JOIN
  FOLLOW
  PAYMENT_RECEIVED
  PAYMENT_COMPLETED
  PAYMENT_SENT
}

enum CircleStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum CircleRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  FULFILLED
}

model Hold {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String  
  amount    Decimal
  status    String  @default("PENDING")
  reference String  @unique

  @@index([userId])
}

